FORMAT: 1A

# MXcloud Data Collection
MXcloud Data Collection Related API.

Resources provided by Cloud Gateway are categorized in */mxc/** related resources.

Resources provided by Cloud Server are categorized in */mxcs/** related resources.

# Common Notations

## Datetime Format

    datetime = date "T" time "Z"
    date     = year "-" month "-" day
    year     = 4DIGIT
    month    = 2DIGIT
    day      = 2DIGIT
    time     = hour ":" minute ":" second 0*1("." fragment)
    hour     = 2DIGIT
    minute   = 2DIGIT
    second   = 2DIGIT
    fragment = 1*6DIGIT

## HexDigit format

    hexdigit = 1*(HEXDIG)

# group MXC Settings

## MXC Configuration [/mxc/config]

### Get Configuration [GET]

Response Attributes:
- *readingExpireTimeSec*: required, integer.

+ Response 200 (application/json)

        {
            "readingExpireTimeSec": 86400
        }

### Update Configuration [PUT]

Request Attributes:
- *readingExpireTimeSec*: required, integer.

Response Attributes:
- *message*: required, string.
  Human-readable message.

+ Request (application/json)

        {
            "readingExpireTimeSec": 86400
        }

+ Response 200 (application/json)

        {
            "message": "success"
        }

# group CG Status

## Get CG Status [/mxc/status]

### Get [GET]

Response Attributes:
- *storDropCount*: required, integer.
  Number of Readings dropped, caused by out-of-storage.
- *fwdDropCount*: required, integer.
  Number of Readings dropped, caused by readings-expired.
- *fwdCount*: required, integer.
  Number of Readings sent by this CG.

+ Response 200 (application/json)

        {
            "storDropCount": 120,
            "fwdDropCount": 99,
            "fwdCount": 2391
        }

# group Job Management

## Get Job List [/mxc/jobs?pageSize={pageSize}&page={page}]

Query Attributes:
- *pageSize*: Default *30*.
- *page*: Start from *1*. Default *1*.

### Get [GET]

Resposne Attributes:
- *totalCount*: required, integer.
- *pageSize*: required, integer.
- *page*: required, integer.
- *jobList*: required, object array.
    - *id*: required, integer.
      Job ID.
    - *name*: required, string.
      Given job name.
    - *command*: required, string.
      Shell command to execute.
    - *logCount*: required, integer.
      Number of logs to keep on Cloud Gateway.
      *0* indicates no logs will be deleted.
    - *scheduleList*: required, object array.
        - *id*: required, integer.
          Schedule ID.
        - *name*: required, string.
          Given schedule name.
        - *enabled*: required, boolean.
          Enable/disable current schedule.
        - *periodSec*: optional, integer.
          Triggered periodically.
        - *cron*: optional, string.
          Cron schedule string.
    - *isRunning*: required, boolean.
      Indicates whether the job is running.
    - *executionCount*: required, integer.
    - *lastExecution*: required, object.
      If the job hasn't been executed yet, all values below would not present.
        - *id*: optional, string.
        - *startTime*: optional, string in Datetime format.
        - *endTime*: optional, string in Datetime format.
        - *exitStatus*: optional, integer.
          Value *0* indicates success, *non-0* indicates failure.

In a schedule configuration, only one of *periodSec* and *cron* should present.

+ Response 200 (application/json)

        {
            "totalCount": 2,
            "pageSize": 30,
            "page": 1,
            "jobList": [
                {
                    "id": 1,
                    "name": "read iologik",
                    "command": "mxcdemo_iologik 192.168.31.75",
                    "logCount": 30,
                    "scheduleList": [
                        {
                            "id": 1,
                            "name": "every 10 seconds",
                            "enabled": true,
                            "periodSec": 10
                        },
                        {
                            "id": 2,
                            "name": "every minute",
                            "enabled": false,
                            "cron": "* * * * *"
                        }
                    ],
                    "isRunning": false,
                    "executionCount": 15,
                    "lastExecution": {
                        "id": "20141124-044217_20141124-044219_00",
                        "startTime": "2014-11-24T04:42:17Z",
                        "endTime": "2014-11-24T04:42:19Z",
                        "exitStatus": 0
                    }
                },
                {
                    "id": 2,
                    "name": "read load profile",
                    "command": "bin/ansi --read-load-profile",
                    "logCount": 7,
                    "scheduleList": [
                        {
                            "id": 1,
                            "name": "every quarter",
                            "enabled": true,
                            "cron": "*/15 * * * *"
                        }
                    ],
                    "isRunning": true,
                    "executionCount": 36,
                    "lastExecution": {
                        "id": "20150305-000304_20150305-000318_00",
                        "startTime": "2015-03-05T00:03:04Z",
                        "endTime": "2015-03-05T00:03:18Z",
                        "exitStatus": 0
                    }
                }
            ]
        }

## Manage Job [/mxc/jobs]

### Create Job [POST]

Request Attributes:
- *name*: required, string.
- *command*: required, string.
- *logCount*: required, integer.
- *scheduleList*: optional, object array.
    - *name*: required, string.
    - *enabled*: optional, boolean.
      Default *true*.
    - *periodSec*: optional, integer.
    - *cron*: optional, string.

Response Attributes:
+ *id*: required, ID of the Job created.

Only one of *periodSec* and *cron* should present in a schedule description.

+ Request (application/json)

        {
            "name": "read load profile",
            "command": "bin/ansi --read-load-profile",
            "logCount": 15,
            "scheduleList": [
                {
                    "name": "every quarter",
                    "enabled": true,
                    "cron": "1,16,31,46 * * * *",
                }
            ]
        }

+ Response 200 (application/json)

        {
            "id": 3
        }

### Replace All Jobs [PUT]

Request Attributes:
- *jobList*: required, object array.
    - *id*: optional, integer.
      Ignored.
    - *name*: required, string.
      Given job name.
    - *command*: required, string.
      Shell command to execute.
    - *logCount*: required, integer.
      Number of logs to keep on Cloud Gateway.
      *0* indicates no logs will be deleted.
    - *scheduleList*: required, object array.
        - *id*: optional, integer.
          Ignored.
        - *name*: required, string.
          Given schedule name.
        - *enabled*: required, boolean.
          Enable/disable current schedule.
        - *periodSec*: optional, integer.
          Triggered periodically.
        - *cron*: optional, string.
          Cron schedule string.
    - *isRunning*: optional, boolean.
      Ignored.
    - *executionCount*: required, integer.
      Ignored.
    - *lastExecution*: required, object.
      Ignored.

Response Attributes:
- *message*: required, string.
  Human-readable message.

+ Request (application/json)

        {
            "jobList": [
                {
                    "name": "read iologik",
                    "command": "mxcdemo_iologik 192.168.31.75",
                    "logCount": 30,
                    "scheduleList": [
                        {
                            "name": "every 10 seconds",
                            "enabled": true,
                            "periodSec": 10
                        },
                        {
                            "name": "every minute",
                            "enabled": false,
                            "cron": "* * * * *"
                        }
                    ]
                },
                {
                    "name": "read load profile",
                    "command": "bin/ansi --read-load-profile",
                    "logCount": 7,
                    "scheduleList": [
                        {
                            "name": "every quarter",
                            "enabled": true,
                            "cron": "*/15 * * * *"
                        }
                    ]
                }
            ]
        }

+ Response 200 (application/json)

        {
            "message": "success"
        }

### Delete Job List [DELETE]

Request Attributes:
- *idList*: required, integer array.
  A list of Job IDs to be deleted.

Response Attributes:
- *message*: required, string.
  Human-readable message.

+ Request (application/json)

        {
            "idList": [
                1, 3, 4
            ]
        }

+ Response 200 (application/json)

        {
            "message": "success"
        }

## Manage Job [/mxc/jobs/{job_id}]

Resource Attributes:
- *job_id*: required.
  The ID of Job of interest.

### Get [GET]

Response Attributes:
- *id*: required, integer.
  Job ID.
- *name*: required, string.
  Given job name.
- *command*: required, string.
  Shell command to execute.
- *logCount*: required, integer.
  Number of logs to keep on Cloud Gateway.
  *0* indicates no logs will be deleted.
- *scheduleList*: required, object array.
    - *id*: required, integer.
      Schedule ID.
    - *name*: required, string.
      Given schedule name.
    - *enabled*: required, boolean.
      Enable/disable current schedule.
    - *periodSec*: optional, integer.
      Triggered periodically.
    - *cron*: optional, string.
      Cron schedule string.
- *isRunning*: required, boolean.
  Indicates whether the job is running.
- *executionCount*: required, integer.
- *lastExecution*: required, object.
  If the job hasn't been executed yet, all values below would not present.
    - *id*: optional, string.
    - *startTime*: optional, string in Datetime format.
    - *endTime*: optional, string in Datetime format.
    - *exitStatus*: optional, integer.
      Value *0* indicates success, *non-0* indicates failure.

+ Response 200 (application/json)

        {
            {
                "id": 1,
                "name": "read iologik",
                "command": "mxcdemo_iologik 192.168.31.75"
                "logCount": 30,
                "scheduleList": [
                    {
                        "id": 1,
                        "name": "every 10 seconds",
                        "enabled": true,
                        "periodSec": 10
                    },
                    {
                        "id": 2,
                        "name": "every minute",
                        "enabled": false,
                        "cron": "* * * * *"
                    }
                ],
                "isRunning": false,
                "executionCount": 15,
                "lastExecution": {
                    "id": "20141124-044217_20141124-044219_00",
                    "startTime": "2014-11-24T04:42:17Z",
                    "endTime": "2014-11-24T04:42:19Z",
                    "exitStatus": 0
                }
            }
        }

### Put [PUT]

Request Attributes:
- *id*: optional, integer.
  If present, it should match *job_id* in resource string.
- *name*: required, string.
- *command*: required, string.
- *logCount*: required, integer.
- *scheduleList*: required, object array.
    - *id*: optional, integer.
      Ignored.
    - *name*: required, string.
    - *enabled*: required, boolean.
    - *periodSec*: optional, integer.
    - *cron*: optional, string.
- *isRunning*: optional, boolean.
  Ignored.
- *executionCount*: optional, integer.
  Ignored.
- *lastExecution*: optional, object.
  Ignored.

Response Attributes:
- *message*: required, string.
  Human-readable message.

If *scheduleList* exist, it replaces all schedule configurations.

+ Request (application/json)

        {
            "name": "read load profile every 15 minutes",
            "command": "bin/ansi --read-load-profile",
            "logCount": 120,
            "scheduleList": [
                {
                    "name": "every 15 minutes",
                    "enabled": true,
                    "periodSec": 900
                }
            ]
        }

+ Response 200 (application/json)

        {
            "id": 3
        }

## On-demand Trigger [/mxc/jobs/{job_id}/trigger]

Resource Attributes:
- *job_id*: integer.
  Job ID.

### Post [POST]

Response Attributes:
- *startTime*: required, string in *Datetime* format.
- *endTime*: required, string in *Datetime* format.
- *exitStatus*: required, integer.

+ Response 200 (application/json)

        {
            "isRunning": false,
            "executionCount": 31,
            "lastExecution": {
                "id": "20141124-044217_20141124-044219_00",
                "startTime": "2014-11-24T04:42:17Z",
                "endTime": "2014-11-24T04:42:19Z",
                "exitStatus": 0
            }
        }

## Manage Schedule List [/mxc/jobs/{job_id}/schedules]

### Get Schedule List [GET]

Response Attributes:
- *scheduleList*: required, object array.
    - *id*: required, integer.
      Schedule ID.
    - *name*: required, string.
      Given schedule name.
    - *enabled*: required, boolean.
      Enable/disable current schedule.
    - *periodSec*: optional, integer.
      Triggered periodically.
    - *cron*: optional, string.
      Cron schedule string.

+ Response 200 (application/json)

        {
            "scheduleList": [
                {
                    "id": 1,
                    "name": "every 10 seconds",
                    "enabled": true,
                    "periodSec": 10
                },
                {
                    "id": 2,
                    "name": "every minute",
                    "enabled": false,
                    "cron": "* * * * *"
                }
            ]
        }

### Create Schedule [POST]

Request Attributes:
- *name*: required, string.
- *enabled*: optional, boolean.
  Default *true*.
- *periodSec*: optional, integer.
- *cron*: optional, string.

Only one of *periodSec* and *cron* should exist.

Response Attributes:
- *id*: required, integer.
  ID of the Schedule created.

+ Request (application/json)

        {
            "name": "every quarter",
            "enabled": true,
            "cron": "1,16,31,46 * * * *"
        }

+ Response 200 (application/json)

        {
            "id": 4
        }

### Delete Schedule List [DELETE]

Request Attributes:
- *idList*: required, integer array.
  A list of Schedule IDs to be deleted.

Response Attributes:
- *message*: required, string.
  Human-readable message.

+ Request (application/json)

        {
            "idList": [
                1, 3, 4
            ]
        }

+ Response 200 (application/json)

        {
            "message": "success"
        }

## Manage Schedule [/mxc/jobs/{job_id}/schedules/{schedule_id}]

Resource Attributes:

### Get Schedule [GET]

Response Attributes:
- *id*: required, integer.
  Schedule ID.
- *name*: required, string.
  Given schedule name.
- *enabled*: required, boolean.
  Enable/disable current schedule.
- *periodSec*: optional, integer.
  Triggered periodically.
- *cron*: optional, string.
  Cron schedule string.

+ Response 200 (application/json)

        {
            "id": 1,
            "name": "every 10 seconds",
            "enabled": true,
            "periodSec": 10
        }

### Update Schedule [PUT]

Request Attributes:
- *id*: optional, integer.
  If given, it should match *schedule_id* in resource string.
- *name*: required, string.
- *enabled*: required, boolean.
- *periodSec*: optional, integer.
- *cron*: optional, string.

Response Attributes:
- *message*: required, string.
  Human-readable message.

+ Request (application/json)

        {
            "name": "every 15 minutes",
            "enabled": true,
            "periodSec": 900
        }

+ Response 200 (application/json)

        {
            "message": "success"
        }

## Get Log List [/mxc/jobs/{job_id}/logs?pageSize={pageSize}&page={page}]

Query Attributes:
- *pageSize*: Default *30*.
- *page*: Start from *1*. Default *1*.

### Get [GET]

Response Attributes:
- *totalCount*: required, integer.
- *pageSize*: required, integer.
- *page*: required, integer.
- *logList*: required, object array.
    - *id*: required, string.
      Log ID.
    - *startTime*: required, string in Datetime format.
    - *endTime*: required, string in Datetime format.
    - *exitStatus*: required, integer.
      Value *0* indicates success, *non-0* indicates failure.

Log list returned is ordered by *startTime* in decending order.

+ Response 200 (application/json)

        {
            "totalCount": 2,
            "pageSize": 30,
            "page": 1,
            "logList":
            [
                {
                    "id": "20141124045217",
                    "startTime": "2014-11-24T04:52:17Z",
                    "endTime": "2014-11-24T04:53:17Z",
                    "exitStatus": 127
                },
                {
                    "id": "20141124044217",
                    "startTime": "2014-11-24T04:42:17Z",
                    "endTime": "2014-11-24T04:43:17Z",
                    "exitStatus": 0
                }
            ]
        }

## Export Log [/mxc/jobs/{job_id}/logs/{log_id}/export]

Resource Attributes:
- *job_id*: integer.
  Job ID.
- *log_id*: string.
  Log ID.

### Get [Get]
(to Backend)

+ Response 200 (application/octet-stream)

        ```binary data goes here```

### Post [POST]

(to Bundle)

This request causes Cloud Gateway to *POST* the *Log File* to the designated *url*.

Request Attributes:
- *url*: required, string.
  URL given for Cloud Gateway to *POST* the log file to.

Response Attributes:
- *startTime*: required, string in *Datetime* format.
  Time when *POST* started.
- *endTime*: required, string in *Datetime* format.
  Time when *POST* ended.
- *url*: required, string.

+ Request (application/json)

        {
            "url": "https://mxc-cs/log/upload",
            "headers": {
                "X-Mx-AccessToken": "MOXAMOXA-TEST-SYSTEM"
            }
        }

+ Response 200 (application/json)

        {
            "url": "https://mxc-cs/log/upload/JEJC9bbc832k1Sc"
        }

# group Custom Bundle Management

## Custom Bundle [/mxc/custom-bundle]

### Get Custom Bundle Information [GET]

Response Attributes:
- *name*: required, string.

Get information about currently deployed client-bundle.

+ Response 200 (application/json)

        {
            "name": "my-application-bundle.tgz",
        }

## Deploy Custom Bundle [/mxc/custom-bundle/update]

### Request Deployment [POST]

Request Attributes:
- *name*: required, string.
- *url*: required, string.

Starting a request while a previous request is in progress, results in error.

+ Request (application/json)

        {
            "name": "my-application-bundle.tgz",
            "url": "https://mxc-cs/client-bundles/UD63CVU7QPLE",
            "headers": {
                "X-Mx-AccessToken": "some-access-token"
            }
        }

+ Response 200 (application/json)

# group Cloud Server Configuration

## Cloud Server Configuration [/mxcs/config]

### Get [GET]

Response Attributes:
- *readingValidityPeriodSec*: required, integer.
  Number of seconds that a received Reading would be kept on Cloud Server.

+ Response 200 (application/json)

        {
            "readingValidityPeriodSec": 7776000
        }

### Put [PUT]

Request Attributes:
- *readingValidityPeriodSec*: required, integer.
  Number of seconds that a received Reading would be kept on Cloud Server.
  Setting this valid to *0* results in *not deleting any Readings*.

Response Attributes:
- *message*: required, string.
  Human-readable message.

+ Request (application/json)

        {
            "readingValidityPeriodSec": 2592000
        }

+ Response 200 (application/json)

        {
            "message": "success"
        }

# group Cloud Server Status

## Cloud Server Status [/mxcs/status]

### Get [GET]

Response Attributes:
- *securityEnabled*: required, boolean.

+ Response 200 (application/json)

        {
            "securityEnabled": true
        }

# group Cloud Gateway Management

## Get Cloud Gateway List [/mxcs/cgs?cgGroupId={cgGroupId}&keyword={keyword}&page={page}&pageSize={pageSize}]

Query Attributes:
- *cgGroupId*: optional, string.
  If given, only CGs in the given group are returned.
- *keyword*: optional, string.
  Return only Cloud Gateways with *id* or *aliasName* similar to the given string.
- *page*: optional, integer. Default *1*.
- *pageSize*: optional, integer. Default *30*.

### Get [GET]

Response Attributes:
- *totalCount*: required, integer. Number of CGs in the list.
- *pageSize*: required, integer.
- *page*: required, integer.
- *cgList*: required, object list.
    - *id*: required. CG ID of each authorized CG.
    - *aliasName*: required, string.
    - *isOnline*: required, boolean.
    - *lastUpdateTime*: required, string in *Datetime* format.
    - *runtimeVersion*: required, string.
    - *equipmentCount*: required, integer.
    - *onlineEquipmentCount*: required, integer.
    - *cellular*: optional, object.
      - *usageByte*: optional, integer.
        Exists only when CG has Cellular Modules.
      - *thresholdByte*: optional, integer
        Exists only when CG has Cellular Modules.
    - *metas*: required, object.
      Contains a dictionary of previously stored key-value pairs.
    - *security*: optional, object.
      Required when the whole system is running with security enabled.
      - *tls-psk*: required, string in *HexDigit* format.

+ Response 200 (application/json)

        {
            "totalCount": 2,
            "pageSize": 10,
            "page": 1,
            "cgList": [
                {
                    "id": "cg-0090e8001234",
                    "aliasName": "CG-01",
                    "isOnline": true,
                    "lastUpdateTime": "2014-02-12T14:31:49.298123Z",
                    "runtimeVersion": "1.0.0",
                    "equipmentCount": 20,
                    "onlineEquipmentCount": 15,
                    "cellular": {
                        "usageByte": 29891893,
                        "thresholdByte": 1073741824
                    },
                    "metas": {
                        "latitude": "0",
                        "longitude": "0"
                    },
                    "security": {
                        "tls-psk": "0123456789ABCDEF"
                    }
                },
                {
                    "id": "cg-0090e8004321",
                    "aliasName": "CG-02",
                    "isOnline": false,
                    "lastUpdateTime": "2014-02-12T14:31:49.298123Z",
                    "runtimeVersion": "1.0.0",
                    "equipmentCount": 20,
                    "onlineEquipmentCount": 15,
                    "cellular": {},
                    "metas": {
                        "latitude": "41.428342",
                        "longitude": "2.94482"
                    },
                    "security": {
                        "tls-psk": "0123456789ABCDEF"
                    }
                }
            ]
        }

## Manage Cloud Gateway [/mxcs/cgs]

### Create Cloud Gateway [POST]

Request Attributes:
- *id*: required. ID of the CG to be created.
- *aliasName*: required, string.
  Can be empty-string.
- *metas: optional, object.
  Contains a dictionary of key-value pairs to be stored relative to the newly
  created CG.
- *security*: optional, object.
  Required when the whole system is running with security enabled.
  - *tls-psk*: required, string in *HexDigit* format.

Response Attributes:
- *id*: required, ID of the CG just created.

+ Request (application/json)

        {
            "id": "cg-0090e8001234",
            "aliasName": "CG-03",
            "metas": {
                "latitude": "41.428342",
                "longitude": "294482"
            },
            "security": {
                "tls-psk": "DEADBEEF"
            }
        }

+ Response 200 (application/json)

        {
            "id": "cg-0090e8001234"
        }

### Delete Cloud Gateway List [DELETE]

Request Attributes:
- *idList*: required, string array.
  Contains a list of IDs of the CGs to be deleted.

Response Attributes:
- *message*: required, string.
  Human-readable message.

+ Request (application/json)

        {
            "idList": [
                "cg-0090e8001234",
                "cg-0090e8004321"
            ]
        }

+ Response 200 (application/json)

        {
            "message": "success"
        }

## Import Cloud Gateway List - backend interface [/mxcs/cgs-import]

Files being imported should be a CSV file having content like:
```
    "cg-id","name","latitude","longitude","tls-psk"
    "cg-0090e84a38cd","CG@192.168.31.80","0.000","0.000","0123456789abcdef"
    "cg-0090e84a0001","CG@nowhere","0.000","0.000","0123456789abcdef"
```

### Post [POST]

+ Request (application/json)

        {
            "url": "http://192.168.31.81:5000/api/v1/download/1234",
            "headers": {
                "X-Mx-AccessToken": "some-access-token"
            }
        }

+ Response 200 (application/json)

        {
            "message": "success"
        }

## Get Cloud Gateway [/mxcs/cgs/{cg_id}]

Resource Attributes:
- *cg_id*: required. The ID of CG of interest.

### Get [GET]

Response Attributes:
- *id*: required, string.
- *aliasName*: required, string.
- *isOnline*: required, boolean.
- *lastUpdateTime*: required, string in *Datetime* format.
- *runtimeVersion*: required, string.
- *equipmentCount*: required, integer.
- *onlineEquipmentCount*: required, integer.
- *cellular*: optional, object.
  - *usageByte*: optional, integer.
    Exists only when CG has Cellular Modules.
  - *thresholdByte*: optional, integer
    Exists only when CG has Cellular Modules.
- *metas*: required, object.
  Contains a dictionary of previously stored key-value pairs.
- *security*: optional, object.
  Required when the whole system is running with security enabled.
  - *tls-psk*: required, string in *HexDigit* format.

+ Response 200 (application/json)

        {
            "id": "cg-0090E8001234",
            "aliasName": "CG-08",
            "isOnline": true,
            "lastUpdateTime": "2014-02-12T14:31:49.298123Z",
            "runtimeVersion": "1.0.0",
            "equipmentCount": 20,
            "onlineEquipmentCount": 15,
                "cellular": {
                    "usageByte": 29891893,
                    "thresholdByte": 1073741824
                },
            "metas": {
                "latitude": "41.428342",
                "longitude": "2.94482"
            },
            "security": {
                "tls-psk": "DEADBEEF"
            }
        }

### Put [PUT]

Request Attributes:
- *id*: optional, string.
  If exist, should match *cg_id* in resource string.
- *aliasName*: required, string.
  Replaces aliasName.
- *isOnline*: optional, boolean.
  Ignored.
- *lastUpdateTime*: optional, string.
  Ignored.
- *runtimeVersion*: optional, string.
  Ignored.
- *equipmentCount*: optional, integer.
  Ignored.
- *onlineEquipmentCount*: optional, integer.
  Ignored.
- *cellular": optional, object.
  Ignored.
- *metas*: required, object.
  Replaces metas currently stored.
- *security*: optional, object.
  Required when the whole system is running with security enabled.
  - *tls-psk*: required, string in *HexDigit* format.

Response Attributes:
- *message*: required, string.
  Human-readable message.

+ Request (application/json)

        {
            "aliasName": "new-alias-name",
            "metas": {
                "latitude": "44.323123",
                "longitude": "1.932132",
            },
            "security": {
                "tls-psk": "DEADBEEF"
            }
        }

+ Response 200 (application/json)

        {
            "message": "success"
        }

## Manage Meta Entries [/mxcs/cgs/{cg_id}/metas]

Resource Attributes:
- *cg_id*: string.

### Update Meta Entries [PUT]

Replaces all key-value pairs stored.

Request Attributes:
- *metas*: required, object.
  Contains a dictionary of key-value pairs to be updated.

Response Attributes:
- *message*: required, string.
  Human-readable message.

+ Request (application/json)

        {
            "metas": {
                "latitude": "41.428342",
            }
        }

+ Response 200 (application/json)

        {
            "message": "success"
        }

# group Equipment Management

## Get Equipment List [/mxcs/equipments?cgId={cgId}&eqGroupId={eqGroupId}&keyword={keyword}&page={page}&pageSize={pageSize}]

Query Attributes:
- *cgId*: optional, string.
  Only Equipments related to this Cloud Gateway is returned.
- *eqGroupId*: optional, string.
  Only Equipments that are in the Group are returned.
- *keyword*: optional, string.
  Return only Equipments with *id* similar to the given string.
- *page*: optional, integer. Default *1*.
- *pageSize*: optional, integer. Default *30*.

### Get [GET]

Response Attributes:
- *totalCount*: required, integer. Number of Equipments in the list.
- *pageSize*: required, integer.
- *page*: required, integer.
- *eqList*: required, object list.
    - *id*: required, string. Equipment ID.
    - *isOnline*: required, boolean.
    - *readingCount*: required, integer.
    - *lastUpdateTime*: required, string in *Datetime* format.
    - *lastUpdateGateway*: required, string.
      The Gateway this Equipment last reported through.
    - *metas*: required, object.
      Contains a dictionary of key-value pairs to be updated.

+ Response 200 (application/json)

        {
            "totalCount": 2,
            "pageSize": 10,
            "page": 1,
            "eqList": [
                {
                    "id": "uc-81xx-0090e800e5ee",
                    "isOnline": true,
                    "readingCount": 2048,
                    "lastUpdateTime": "2015-02-12T14:31:49.298123Z",
                    "lastUpdateGateway": "cg-0090e8001234",
                    "metas": {
                        "latitude": "41.428342",
                        "longitude": "2.94482"
                    }
                },
                {
                    "id": "iologik-e2242",
                    "isOnline": true,
                    "readingCount": 1037,
                    "lastUpdateTime": "2015-02-12T14:31:49.298123Z",
                    "lastUpdateGateway": "cg-0090e8004321",
                    "metas": {
                    }
                }
            ]
        }

## Delete Equipment List [/mxcs/equipments]

### Delete [DELETE]

Deleting an Equipment deletes all the *Readings* reported by that Equipment.

Request Attributes:
- *idList*: required, string array.
  Contains a list of IDs of the Equipments to be deleted.

Response Attributes:
- *message*: required, string.
  Human-readable message.

+ Request (application/json)

        {
            "idList": [
                "uc-81xx-0090e800e5ee"
            ]
        }

+ Response 200 (application/json)

        {
            "message": "success"
        }

## Manage Equipment [/mxcs/equipments/{equipment_id}]

Resource Attributes:
- *equipment_id*: string.

### Get [GET]

Response Attributes:
- *id*: required, string. Equipment ID.
- *isOnline*: required, boolean.
- *readingCount*: required, integer.
- *lastUpdateTime*: required, string in *Datetime* format.
- *lastUpdateGateway*: required, string.
  The Gateway this Equipment last reported through.
- *metas*: required, object.
  Contains a dictionary of key-value pairs to be updated.

+ Response 200 (application/json)

        {
            "id": "iologik-e2242",
            "isOnline": true,
            "readingCount": 1037,
            "lastUpdateTime": "2015-2-12T14:31:49.298123Z",
            "lastUpdateGateway": "cg-0090e8004321",
            "metas": {
                "latitude": "40.428342",
                "longitude": "1.94482"
            }
        }

## Manage Meta Entries [/mxcs/equipments/{equipment_id}/metas]

Resource Attributes:
- *equipment_id*: string.

### Put [PUT]

Replaces all key-value pairs stored.

Request Attributes:
- *metas*: required, object.
  Contains a dictionary of key-value pairs to be updated.

Response Attributes:
- *message*: required, string.
  Human-readable message.

+ Request (application/json)

        {
            "metas": {
                "latitude": "41.428342",
            }
        }

+ Response 200 (application/json)

        {
            "message": "success"
        }

### Post [POST]

Create new key-value pairs.

If any of the keys in *metas* already exists, none of the key-value pairs would
be created and error will be reponsed.

Request Attributes:
- *metas*: required, object.
  Contains a dictionary of key-value pairs to be created.

Response Attributes:
- *message*: required, string.
  Human-readable message.

+ Request (application/json)

        {
            "metas": {
                "latitude": "41.428342",
                "longitude": "2.94482"
            }
        }

+ Response 200 (application/json)

        {
            "message": "success"
        }

### Delete [DELETE]

Delete key-value pairs.

Request Attributes:
- *keyList*: required, string array.
  Keys to be deleted.

Resonse Attributes:
- *message*: required, string.
  Human-readable message.

+ Request (application/json)

        {
            "keyList": [
                "latitude",
                "longitude"
            ]
        }

+ Response 200 (application/json)

        {
            "message": "success"
        }

# group Query Readings

## Get Channel List [/mxcs/equipments/{equipment_id}/channels?pageSize={pageSize}&page={page}]

Resource Attributes:
- *equipment_id*: required, string.

Query Attributes:
- *pageSize*: optional, integer.
  Default *30*.
- *page*: optional, integer.
  Default *1*.

### Get [GET]

Response Attributes:
- *totalCount*: required, integer.
- *pageSize*: required, integer.
- *page*: required, integer.
- *channelList*: required, object array.
    - *id*: required, string.
      Channel ID.
    - *value*: required, string or float.
      Latest value received.
    - *time*: required, string in Datetime format.
      Latest value time.
    - *receivedTime*: required, string in Datetime format.
      Latest value receiving time.

+ Response 200 (application/json)

        {
            "totalCount": 2,
            "pageSize": 10,
            "page": 1,
            "channelList": [
                {
                    "id": "ai0",
                    "value": 1.0264739990234375,
                    "time": "2015-01-14T07:43:46.814000Z",
                    "receivedTime": "2015-01-14T08:01:42.283000Z"
                },
                {
                    "id": "di0",
                    "value": "on",
                    "time": "2015-01-14T10:08:51.181000Z",
                    "receivedTime": "2015-01-14T08:01:43.283000Z"
                }
            ]
        }

## Get Readings [/mxcs/equipments/{equipment_id}/channels/{channel_id}/readings?startTime={startTime}&endTime={endTime}&intervalSec={intervalSec}&page={page}&pageSize={pageSize}&asc={asc}]

Resource Attributes:
- *equipment_id*: required, string.
- *channel_id*: required, string.

Query Attributes:
- *startTime*: optional, string in *Datetime* format.
- *endTime*: optional, string in *Datetime* format.
- *intervalSec*: optional, integer.
  Return Readings with interval.
- *page*: optional, integer.
  Default *1*.
- *pageSize*: optional, integer.
  Default *30*.
- *asc*: optional, boolean.
  Return Readings in ascending order.
  Default *false*.

### Get [GET]

Response Attributes:
- *totalCount*: required, integer.
- *pageSize*: required, integer.
- *page*: required, integer.
- *readingList*: required, object list.
    - *value*: required, string or float.
    - *time*: required, string in Datetime format.

+ Response 200 (application/json)

        {
            "totalCount": 2,
            "pageSize": 10,
            "page": 1,
            "readingList": [
                {
                    "value": 1.0255584716796875,
                    "time": "2015-01-14T10:08:51.181000Z"
                },
                {
                    "value": 1.0264739990234375,
                    "time": "2015-01-14T07:43:46.814000Z"
                }
            ]
        }

# group Manage Groups in CS

## Get CG Group List [/mxcs/cg-groups?keyword={keyword}&page={page}&pageSize={pageSize}]

Query Attributes:
- keyword: optional, string.
  Return only CG Groups with *id* similar to the given string.
- page: optional, integer. Default *1*.
- pageSize: optional, integer. Default *30*.

### Get [GET]

Response Attributes:
- *totalCount*: required, integer.
- *pageSize*: required, integer.
- *page*: required, integer.
- *cgGroupList*: required, object list.
    - *id*: required, string.
      Group ID.
    - *aliasName*: required, string.
      Group alias name.
    - *cgList*: required, string array.
      IDs of the CGs in the Group.

+ Response 200 (application/json)

        {
            "totalCount": 2,
            "pageSize": 30,
            "page": 1,
            "cgGroupList": [
                {
                    "id": "moxa-2014",
                    "aliasName": "moxa-2014",
                    "cgList": [
                        "cg-0090e8001234",
                        "cg-0090e8004321"
                    ]
                },
                {
                    "id": "moxa-2015",
                    "aliasName": "moxa-2015",
                    "cgList": [
                    ]
                }
            ]
        }

## Manage CG Group [/mxcs/cg-groups]

### Create CG Group [POST]

Request Attributes:
- *id*: required, string.
- *aliasName*: required, string.
  Can be empty-string.
- *cgList*: required, string list.
  A list of CG IDs to be inserted into the group.

Response Attributes:
- *id*: required, ID of the CG Group just created.

+ Request (application/json)

        {
            "id": "moxa-2014",
            "aliasName": "moxa-2014",
            "cgList": [
                "cg-0090e8001234",
                "cg-0090e8004321"
            ]
        }

+ Response 200 (application/json)

        {
            "id": "moxa-2014"
        }

### Delete CG Group List [DELETE]

Request Attributes:
- *idList*: required, string array.
  Contains a list of IDs of the CGs to be deleted.

Response Attributes:
- *message*: required, string.
  Human-readable message.

+ Request (application/json)

        {
            "idList": [
                "moxa-2014",
                "moxa-2015"
            ]
        }

+ Response 200 (application/json)

        {
            "message": "success"
        }

## Manage CG Group [/mxcs/cg-groups/{cg_group_id}]

Resource Attributes:
- *cg_group_id*: required.
  The ID of the CG Group of interest.

### Get [GET]

Response Attributes:
- *id*: required, string.
  Group ID.
- *aliasName*: required, string.
  Group alias name.
- *cgList*: required, string array.
  IDs of the CGs in the Group.

+ Response 200 (application/json)

        {
            "id": "moxa-2014",
            "aliasName": "moxa-2014",
            "cgList": [
                "cg-0090e8001234",
                "cg-0090e8004321"
            ]
        }

### Put [PUT]

Request Attributes:
- *id*: optional, string.
  If given, the value should match *cg_group_id* in resource URI.
- *aliasName*: required, string.
- *cgList*: required, string array.

Response Attributes:
- *message*: required, string.
  Human-readable message.

+ Request (application/json)

        {
            "aliasName": "moxa-2014",
            "cgList": [
                "cg-0090e8001234"
            ]
        }

+ Response 200 (application/json)

        {
            "message": "success"
        }

## Get Equipment Group List [/mxcs/eq-groups?keyword={keyword}&page={page}&pageSize={pageSize}]

Query Attributes:
- keyword: optional, string.
  Return only Equipment Groups with *id* similar to the given string.
- page: optional, integer. Default *1*.
- pageSize: optional, integer. Default *30*.

### Get [GET]

Response Attributes:
- *totalCount*: required, integer.
- *pageSize*: required, integer.
- *page*: required, integer.
- *eqGroupList*: required, object list.
    - *id*: required, string.
      Group ID.
    - *aliasName*: required, string.
      Group alias name.
    - *eqList*: required, string array.
      IDs of the Equipments in the Group.

+ Response 200 (application/json)

        {
            "totalCount": 2,
            "pageSize": 30,
            "page": 1,
            "eqGroupList": [
                {
                    "id": "moxa-2014",
                    "aliasName": "moxa-2014",
                    "eqList": [
                        "iologik",
                        "uc-8100"
                    ]
                },
                {
                    "id": "moxa-2015",
                    "aliasName": "moxa-2015",
                    "eqList": [
                    ]
                }
            ]
        }

## Manage Equipment Group [/mxcs/eq-groups]

### Create Equipment Group [POST]

Request Attributes:
- *id*: required, string.
- *aliasName*: required, string.
  Can be empty-string.
- *eqList*: required, string list.
  A list of CG IDs to be inserted into the group.

Response Attributes:
- *id*: required, ID of the Equipment Group just created.

+ Request (application/json)

        {
            "id": "moxa-2014",
            "aliasName": "moxa-2014",
            "eqList": [
                "iologik",
                "uc-8100"
            ]
        }

+ Response 200 (application/json)

        {
            "id": "moxa-2014"
        }

### Delete Equipment Group List [DELETE]

Request Attributes:
- *idList*: required, string array.
  Contains a list of IDs of the Equipments to be deleted.

Response Attributes:
- *message*: required, string.
  Human-readable message.

+ Request (application/json)

        {
            "idList": [
                "moxa-2014",
                "moxa-2015"
            ]
        }

+ Response 200 (application/json)

        {
            "message": "success"
        }

## Manage Equipment Group [/mxcs/eq-groups/{eq_group_id}]

Resource Attributes:
- *eq_group_id*: required.
  The ID of the Equipment Group of interest.

### Get [GET]

Response Attributes:
- *id*: required, string.
  Group ID.
- *aliasName*: required, string.
  Group alias name.
- *eqList*: required, string array.
  IDs of the Equipments in the Group.

+ Response 200 (application/json)

        {
            "id": "moxa-2014",
            "aliasName": "moxa-2014",
            "eqList": [
                "iologik",
                "uc-8100"
            ]
        }

### Put [PUT]

Request Attributes:
- *id*: optional, string.
  If given, the value should match *eq_group_id* in resource URI.
- *aliasName*: required, string.
- *eqList*: required, string array.

Response Attributes:
- *message*: required, string.
  Human-readable message.

+ Request (application/json)

        {
            "aliasName": "moxa-2014",
            "eqList": [
                "iologik",
            ]
        }

+ Response 200 (application/json)

        {
            "message": "success"
        }

# group Profile of Equipments and CGs

## All CGs [/mxcs/profile/cgs?cgGroupId={cgGroupId}]

Query Attributes:
- *cgGroupId*: optional, string.
  If given, only CGs in CG Group and Equipments reported by CG in that Group is taken into account.

### Get Specific Group information [GET]

Response Attributes:
- cgCount: required, integer.
  Number of CGs that are taken into account.
- onlineCgCount: required, integer.
  Number of CGs that are currently online.
- equipmentCount: required, integer.
  Number of Equipments that are taken into account.
- onlineEquipmentCount: required, integer.
  Number of Equipments that are currently online.

+ Response 200 (application/json)

        {
            "cgCount": 10,
            "onlineCgCount": 9,
            "equipmentCount": 20,
            "onlineEquipmentCount": 15
        }

## All Equipments [/mxcs/profile/equipments?cgId={cgId}&cgGroupId={cgGroupId}&eqGroupId={eqGroupId}]

Query Attributes:
- *cgId*: optional, string.
  If given, only Equipments reported by this CG are taken into account.
- *cgGroupId*: optional, string.
  If given, only Equipments reported by CG in that Group are taken into account.
- *eqGroupId*: optional, string.
  If given, only Equipments in that Group are taken into account.

### Get Specific Group information [GET]

Response Attributes:
- *equipmentCount*: required, integer.
  Number of Equipments that are taken into account.
- *onlineEquipmentCount*: required, integer.
  Number of Equipments that are currently online.

+ Response 200 (application/json)

        {
            "equipmentCount": 20,
            "onlineEquipmentCount": 15
        }

# group CG Online Count

## Get History CG Online Count [/mxcs/history/cg-online-count?cgGroupId={cgGroupId}&startTime={startTime}&endTime={endTime}&type={type}]

Query Attributes:
- *cgGroupId*: optional, string.
  If given, only CGs in this Group is taken into account.
- *startTime*: required, string in Datetime format.
- *endTime*: required, string in Datetime format.
- *type*: optional, string.
  Only *daily* is supported.
  Default *daily*.

### Get [GET]

Response Attributes:
- *historyList*: required, object array.
    - *startTime*: required, string in Datetime format.
    - *endTime*: required, string in Datetime format.
    - *count*: required, integer.

+ Response 200 (application/json)

        {
            "historyList": [
                {
                    "startTime": "2015-01-10T00:00:00.000000Z",
                    "endTime": "2015-01-11T00:00:00.000000Z",
                    "count": 10
                },
                {
                    "startTime": "2015-01-11T00:00:00.000000Z",
                    "endTime": "2015-01-12T00:00:00.000000Z",
                    "count": 11
                },
                {
                    "startTime": "2015-01-12T00:00:00.000000Z",
                    "endTime": "2015-01-13T00:00:00.000000Z",
                    "count": 19
                },
                {
                    "startTime": "2015-01-13T00:00:00.000000Z",
                    "endTime": "2015-01-14T00:00:00.000000Z",
                    "count": 12
                },
                {
                    "startTime": "2015-01-14T00:00:00.000000Z",
                    "endTime": "2015-01-15T00:00:00.000000Z",
                    "count": 15
                },
                {
                    "startTime": "2015-01-15T00:00:00.000000Z",
                    "endTime": "2015-01-16T00:00:00.000000Z",
                    "count": 20
                },
                {
                    "startTime": "2015-01-16T00:00:00.000000Z",
                    "endTime": "2015-01-17T00:00:00.000000Z",
                    "count": 25
                }
            ]
        }

# group Equipment Online Count

## Get History Equipment Online Count [/mxcs/history/equipment-online-count?cgGroupId={cgGroupId}&eqGroupId={eqGroupId}&startTime={startTime}&endTime={endTime}&type={type}]

Query Attribute:
- *cgGroupId*: optional, string.
  If given, only Equipments that was reported by CGs in the CG Group is taken into account.
- *eqGroupId*: optional, string.
  If given, only Equipments in the Equipment Group is taken into account.
- *startTime*: required, string in Datetime format.
- *endTime*: required, string in Datetime format.
- *type*: optional, string.
  Only *daily* is supported.
  Default *daily*.

### Get [GET]

Response Attribute:
- *historyList*: required, object array.
    - *startTime*: required, string in Datetime format.
    - *endTime*: required, string in Datetime format.
    - *count*: required, integer.

+ Response 200 (application/json)

        {
            "historyList": [
                {
                    "startTime": "2015-01-10T00:00:00.000000Z",
                    "endTime": "2015-01-11T00:00:00.000000Z",
                    "count": 10
                },
                {
                    "startTime": "2015-01-11T00:00:00.000000Z",
                    "endTime": "2015-01-12T00:00:00.000000Z",
                    "count": 11
                },
                {
                    "startTime": "2015-01-12T00:00:00.000000Z",
                    "endTime": "2015-01-13T00:00:00.000000Z",
                    "count": 19
                },
                {
                    "startTime": "2015-01-13T00:00:00.000000Z",
                    "endTime": "2015-01-14T00:00:00.000000Z",
                    "count": 12
                },
                {
                    "startTime": "2015-01-14T00:00:00.000000Z",
                    "endTime": "2015-01-15T00:00:00.000000Z",
                    "count": 15
                },
                {
                    "startTime": "2015-01-15T00:00:00.000000Z",
                    "endTime": "2015-01-16T00:00:00.000000Z",
                    "count": 20
                },
                {
                    "startTime": "2015-01-16T00:00:00.000000Z",
                    "endTime": "2015-01-17T00:00:00.000000Z",
                    "count": 25
                }
            ]
        }

# group CG Reading Count

## Get History CG Reading Count [/mxcs/history/cg-reading-count?cgGroupId={cgGroupId}&startTime={startTime}&endTime={endTime}&type={type}]

Query Attribute:
- *cgGroupId*: optional, string.
  If given, only CGs in this Group is taken into account.
- *startTime*: required, string in Datetime format.
- *endTime*: required, string in Datetime format.
- *type*: optional, string.
  Only *daily* is supported.
  Default *daily*.

### Get [GET]

Response Attribute:
- *historyList*: required, object list.
    - *startTime*: required, string in Datetime format.
    - *endTime*: required, string in Datetime format.
    - *count*: required, integer.

+ Response 200 (application/json)

        {
            "historyList": [
                {
                    "startTime": "2015-01-10T00:00:00.000000Z",
                    "endTime": "2015-01-11T00:00:00.000000Z",
                    "count": 10
                },
                {
                    "startTime": "2015-01-11T00:00:00.000000Z",
                    "endTime": "2015-01-12T00:00:00.000000Z",
                    "count": 11
                },
                {
                    "startTime": "2015-01-12T00:00:00.000000Z",
                    "endTime": "2015-01-13T00:00:00.000000Z",
                    "count": 19
                },
                {
                    "startTime": "2015-01-13T00:00:00.000000Z",
                    "endTime": "2015-01-14T00:00:00.000000Z",
                    "count": 12
                },
                {
                    "startTime": "2015-01-14T00:00:00.000000Z",
                    "endTime": "2015-01-15T00:00:00.000000Z",
                    "count": 15
                },
                {
                    "startTime": "2015-01-15T00:00:00.000000Z",
                    "endTime": "2015-01-16T00:00:00.000000Z",
                    "count": 20
                },
                {
                    "startTime": "2015-01-16T00:00:00.000000Z",
                    "endTime": "2015-01-17T00:00:00.000000Z",
                    "count": 25
                }
            ]
        }

# group Equipment Reading Count

## Get History Equipment Reading Count [/mxcs/history/equipment-reading-count?cgGroupId={cgGroupId}&eqGroupId={eqGroupId}&startTime={startTime}&endTime={endTime}&type={type}]

Provide the number of Readings reported by Equipments.

Query Attribute:
- *cgGroupId*: optional, string.
  If given, only Equipments that was reported by CGs in the CG Group is taken into account.
- *eqGroupId*: optional, string.
  If given, only Equipments in the Equipment Group is taken into account.
- *startTime*: required, string in Datetime format.
- *endTime*: required, string in Datetime format.
- *type*: optional, string.
  Only *daily* is supported.
  Default *daily*.

### Get [GET]

Response Attribute:
- *historyList*: required, object array.
    - *startTime*: required, string in Datetime format.
    - *endTime*: required, string in Datetime format.
    - *count*: required, integer.

+ Response 200 (application/json)

        {
            "historyList": [
                {
                    "startTime": "2015-01-10T00:00:00.000000Z",
                    "endTime": "2015-01-11T00:00:00.000000Z",
                    "count": 10
                },
                {
                    "startTime": "2015-01-11T00:00:00.000000Z",
                    "endTime": "2015-01-12T00:00:00.000000Z",
                    "count": 11
                },
                {
                    "startTime": "2015-01-12T00:00:00.000000Z",
                    "endTime": "2015-01-13T00:00:00.000000Z",
                    "count": 19
                },
                {
                    "startTime": "2015-01-13T00:00:00.000000Z",
                    "endTime": "2015-01-14T00:00:00.000000Z",
                    "count": 12
                },
                {
                    "startTime": "2015-01-14T00:00:00.000000Z",
                    "endTime": "2015-01-15T00:00:00.000000Z",
                    "count": 15
                },
                {
                    "startTime": "2015-01-15T00:00:00.000000Z",
                    "endTime": "2015-01-16T00:00:00.000000Z",
                    "count": 20
                },
                {
                    "startTime": "2015-01-16T00:00:00.000000Z",
                    "endTime": "2015-01-17T00:00:00.000000Z",
                    "count": 25
                }
            ]
        }

# group Cellular Usage Distribution

## Get History Cellular Usage Distribution [/mxcs/history/cellular-usage?cgGroupId={cgGroupId}&upperBoundBytes={upperBoundBytes}&categoryCount={categoryCount}]

Query Attribute:
- *cgGroupId*: optional, string.
  If given, only CGs in the given group are taken into account.
- *upperBoundBytes*: optional, integer.
  If given, it sets the highest usage category.
  If not given, the value would be determined dynamically.
- *categoryCount*: optional, integer.
  If given, it sets the number of usage categories returned.
  Should be greater than 2.
  Default 5.

### Get [GET]

Response Attributes:
- *usageCategoryList*: required, object array.
    - *lowerBoundByte*: required, integer.
      Represent the lower bound of usage.
    - *upperBoundByte*: required, integer.
      Represent the upper bound of usage.
      Not exist in the last element of *usageCategoryList*.
    - *count*: required, integer.
      Number of CGs with cellular usage lies in the boundary given by *lowerBoundByte* and *upperBoundByte*.

+ Response 200 (application/json)

        {
            "usageCategoryList": [
                {
                    "lowerBoundByte": 0,
                    "upperBoundByte": 134217728,
                    "count": 3
                },
                {
                    "lowerBoundByte": 134217728,
                    "upperBoundByte": 268435456,
                    "count": 2
                },
                {
                    "lowerBoundByte": 268435456,
                    "upperBoundByte": 536870912,
                    "count": 9
                },
                {
                    "lowerBoundByte": 536870912,
                    "upperBoundByte": 1073741824,
                    "count": 1
                },
                {
                    "lowerBoundByte": 1073741824,
                    "count": 1
                }
            ]
        }

# Group Modbus Equipment Template

## Get List [/mxc/modbus/equipment-templates]

### Get all equipment templates [GET]

Response attributes:

- **id** (required, integer, `1`): Template ID.
- **name** (required, string, `ioLogik-E2210`): Template name. Allowed chars `[A-Za-z0-9_-]`, 3 <= length <= 255
- **tagList** (required, object array)
    - **name** (required, string, `di0`): Tag name. Allowed chars `[A-Za-z0-9_-]`, 2 <= length <= 255.
    - **unit** (optional, string, `Volt`): Tag unit.
    - **function** (required, string, `read-coils`): Function to retrieve the Tag value. Can be one of `read-coils`, `read-input-registers`, `read-discrete-inputs`, `read-holding-registers`.
    - **address** (required, integer, `0`): Address of the tag. `0x0000(0) <= value <= 0xFFFF(65535)`
    - **quantity** (required, integer, `1`): Tag length. Must greater than 0.
    - **type** (required, string, `UINT16`): Tag data type. Must be one of `uint16`, `uint32`, `uint64`, `int16`, `int32`, `int64`, `float32`, `float64`, `string`
    - **enableByteOrder** (optional, integer, `0`): Enable byte order or not.
    - **byteOrder** (optional, string, `CDAB`): Switch input byte order. Can be any permutation of `BA`, `CDAB`, `DCBA`.
    - **enableInvalidValue** (optional, integer, `0`): Enable invalidValue or not.
    - **invalidValue** (optional, integer array): Array size is equals to quantity. `if input == INVALID_VALUE, assume the value is not valid`.
    - **description** (optional, string, `alarm input`): User edited description.
    - **enableAutoScaling** (optional, integer, `0`): Enable auto scaling or not.
    - **autoScalingMode** (optional, string, `intercept`): Auto scaling mode: intercept or point
    - **autoScaling** (required if enableAutoScaling = 1, object)
        - **slope** (required if autoScaling = intercept, number, `3.14`): `V = input * S + O`.
        - **offset** (required if autoScaling = intercept, number, `-0.33`): `V = input * S + O`.
        - **sourceMin** (required if autoScaling = point, number, `0`): `output = ((input-sourceMin) * (targetMax-targetMin) / (sourceMax-sourceMin)) + targetMin`.
        - **sourceMax** (required if autoScaling = point, number, `1`): `output = ((input-sourceMin) * (targetMax-targetMin) / (sourceMax-sourceMin)) + targetMin`.
        - **targetMin** (required if autoScaling = point, number, `0`): `output = ((input-sourceMin) * (targetMax-targetMin) / (sourceMax-sourceMin)) + targetMin`.
        - **targetMax** (required if autoScaling = point, number, `100`): `output = ((input-sourceMin) * (targetMax-targetMin) / (sourceMax-sourceMin)) + targetMin`.

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "ioLogik-E2242",
                "tagList": [
                    {
                        "name": "di0",
                        "function": "read-coils",
                        "address": 0,
                        "quantity": 1,
                        "type": "UINT16",
                        "description": "alarm input"
                    },
                    {
                        "name": "di1",
                        "function": "read-coils",
                        "address": 1,
                        "quantity": 1,
                        "type": "UINT16",
                        "description": ""
                    },
                    {
                        "name": "di2",
                        "function": "read-coils",
                        "address": 2,
                        "quantity": 1,
                        "type": "UINT16",
                        "description": ""
                    },
                    {
                        "name": "di3",
                        "function": "read-coils",
                        "address": 3,
                        "quantity": 1,
                        "type": "UINT16",
                        "description": ""
                    },
                    {
                        "name": "di4",
                        "function": "read-coils",
                        "address": 4,
                        "quantity": 1,
                        "type": "UINT16",
                        "description": ""
                    },
                    {
                        "name": "di5",
                        "function": "read-coils",
                        "address": 5,
                        "quantity": 1,
                        "type": "UINT16",
                        "description": ""
                    },
                    {
                        "name": "di6",
                        "function": "read-coils",
                        "address": 6,
                        "quantity": 1,
                        "type": "UINT16",
                        "description": ""
                    },
                    {
                        "name": "di7",
                        "function": "read-coils",
                        "address": 7,
                        "quantity": 1,
                        "type": "UINT16",
                        "description": ""
                    },
                    {
                        "name": "di8",
                        "function": "read-coils",
                        "address": 8,
                        "quantity": 1,
                        "type": "UINT16",
                        "description": ""
                    },
                    {
                        "name": "di9",
                        "function": "read-coils",
                        "address": 9,
                        "quantity": 1,
                        "type": "UINT16",
                        "description": ""
                    },
                    {
                        "name": "di10",
                        "function": "read-coils",
                        "address": 10,
                        "quantity": 1,
                        "type": "UINT16",
                        "description": ""
                    },
                    {
                        "name": "di11",
                        "function": "read-coils",
                        "address": 11,
                        "quantity": 1,
                        "type": "UINT16",
                        "description": ""
                    },
                    {
                        "name": "ai0",
                        "function": "read-input-registers",
                        "address": 304,
                        "quantity": 2,
                        "byteOrder": "CDAB",
                        "type": "FLOAT32",
                        "description": ""
                    },
                    {
                        "name": "ai1",
                        "function": "read-input-registers",
                        "address": 306,
                        "quantity": 2,
                        "enableByteOrder": 1,
                        "byteOrder": "CDAB",
                        "type": "FLOAT32",
                        "description": ""
                    },
                    {
                        "name": "ai2",
                        "function": "read-input-registers",
                        "address": 308,
                        "quantity": 2,
                        "enableByteOrder": 1,
                        "byteOrder": "CDAB",
                        "type": "FLOAT32",
                        "description": ""
                    },
                    {
                        "name": "ai3",
                        "function": "read-input-registers",
                        "address": 310,
                        "quantity": 2,
                        "enableByteOrder": 1,
                        "byteOrder": "CDAB",
                        "type": "FLOAT32",
                        "description": ""
                    }
                ]
            },
            {
                "id": 2,
                "name": "ioLogik-E2214",
                "tagList": [
                    {
                        "name": "di0",
                        "function": "read-coils",
                        "address": 0,
                        "quantity": 1,
                        "type": "UINT16",
                        "description": "alarm input"
                    },
                    {
                        "name": "di1",
                        "function": "read-coils",
                        "address": 1,
                        "quantity": 1,
                        "type": "UINT16",
                        "description": ""
                    },
                    {
                        "name": "di2",
                        "function": "read-coils",
                        "address": 2,
                        "quantity": 1,
                        "type": "UINT16",
                        "description": ""
                    },
                    {
                        "name": "di3",
                        "function": "read-coils",
                        "address": 3,
                        "quantity": 1,
                        "type": "UINT16",
                        "description": ""
                    },
                    {
                        "name": "di4",
                        "function": "read-coils",
                        "address": 4,
                        "quantity": 1,
                        "type": "UINT16",
                        "description": ""
                    },
                    {
                        "name": "di5",
                        "function": "read-coils",
                        "address": 5,
                        "quantity": 1,
                        "type": "UINT16",
                        "description": ""
                    },
                    {
                        "name": "di6",
                        "function": "read-coils",
                        "address": 6,
                        "quantity": 1,
                        "type": "UINT16",
                        "description": ""
                    },
                    {
                        "name": "di7",
                        "function": "read-coils",
                        "address": 7,
                        "quantity": 1,
                        "type": "UINT16",
                        "description": ""
                    },
                    {
                        "name": "di8",
                        "function": "read-coils",
                        "address": 8,
                        "quantity": 1,
                        "type": "UINT16",
                        "description": ""
                    },
                    {
                        "name": "di9",
                        "function": "read-coils",
                        "address": 9,
                        "quantity": 1,
                        "type": "UINT16",
                        "description": ""
                    },
                    {
                        "name": "di10",
                        "function": "read-coils",
                        "address": 10,
                        "quantity": 1,
                        "type": "UINT16",
                        "description": ""
                    },
                    {
                        "name": "di11",
                        "function": "read-coils",
                        "address": 11,
                        "quantity": 1,
                        "type": "UINT16",
                        "description": ""
                    },
                    {
                        "name": "ai0",
                        "function": "read-input-registers",
                        "address": 304,
                        "quantity": 2,
                        "byteOrder": "CDAB",
                        "type": "FLOAT32",
                        "description": ""
                    },
                    {
                        "name": "ai1",
                        "function": "read-input-registers",
                        "address": 306,
                        "quantity": 2,
                        "byteOrder": "CDAB",
                        "type": "FLOAT32",
                        "description": ""
                    },
                    {
                        "name": "ai2",
                        "function": "read-input-registers",
                        "address": 308,
                        "quantity": 2,
                        "byteOrder": "CDAB",
                        "type": "FLOAT32",
                        "description": ""
                    },
                    {
                        "name": "ai3",
                        "function": "read-input-registers",
                        "address": 310,
                        "quantity": 2,
                        "byteOrder": "CDAB",
                        "type": "FLOAT32",
                        "description": ""
                    }
                ]
            }
        ]

### Create a new equipment template [POST]

Request attributes:
- **name** (required, string, `ioLogik-E2210`): Template name. Allowed chars `[A-Za-z0-9_-]`, 3 <= length <= 255
- **tagList** (required, object array)
    - **name** (required, string, `di0`): Tag name. Allowed chars `[A-Za-z0-9_-]`, 2 <= length <= 255.
    - **unit** (optional, string, `Volt`): Tag unit.
    - **function** (required, string, `read-coils`): Function to retrieve the Tag value. Can be one of `read-coils`, `read-input-registers`, `read-discrete-inputs`, `read-holding-registers`.
    - **address** (required, integer, `0`): Address of the tag. `0x0000(0) <= value <= 0xFFFF(65535)`
    - **quantity** (required, integer, `1`): Tag length. Must greater than 0.
    - **type** (required, string, `UINT16`): Tag data type. Must be one of `uint16`, `uint32`, `uint64`, `int16`, `int32`, `int64`, `float32`, `float64`, `string`
    - **enableByteOrder** (optional, integer, `0`): Enable byte order or not.
    - **byteOrder** (optional, string, `CDAB`): Switch input byte order. Can be any permutation of `BA`, `CDAB`, `DCBA`.
    - **enableInvalidValue** (optional, integer, `0`): Enable invalidValue or not.
    - **invalidValue** (optional, integer array): Array size is equals to quantity. `if input == INVALID_VALUE, assume the value is not valid`.
    - **description** (optional, string, `alarm input`): User edited description.
    - **enableAutoScaling** (optional, integer, `0`): Enable auto scaling or not.
    - **autoScalingMode** (optional, string, `intercept`): Auto scaling mode: intercept or point
    - **autoScaling** (required if enableAutoScaling = 1, object)
        - **slope** (required if autoScaling = intercept, number, `3.14`): `V = input * S + O`.
        - **offset** (required if autoScaling = intercept, number, `-0.33`): `V = input * S + O`.
        - **sourceMin** (required if autoScaling = point, number, `0`): `output = ((input-sourceMin) * (targetMax-targetMin) / (sourceMax-sourceMin)) + targetMin`.
        - **sourceMax** (required if autoScaling = point, number, `1`): `output = ((input-sourceMin) * (targetMax-targetMin) / (sourceMax-sourceMin)) + targetMin`.
        - **targetMin** (required if autoScaling = point, number, `0`): `output = ((input-sourceMin) * (targetMax-targetMin) / (sourceMax-sourceMin)) + targetMin`.
        - **targetMax** (required if autoScaling = point, number, `100`): `output = ((input-sourceMin) * (targetMax-targetMin) / (sourceMax-sourceMin)) + targetMin`.

+ Request (application/json)

        {
            "name": "ioLogik-E2242",
            "tagList": [
                {
                    "name": "di0",
                    "function": "read-coils",
                    "address": 0,
                    "quantity": 1,
                    "type": "UINT16",
                    "description": "alarm input"
                }
            ]
        }

+ Response 200 (application/json)

        {
            "id": 1,
            "name": "ioLogik-E2242",
            "tagList": [
                {
                    "name": "di0",
                    "function": "read-coils",
                    "address": 0,
                    "quantity": 1,
                    "type": "UINT16",
                    "description": "alarm input"
                }
            ]
        }

### Delete multiple equipment templates [DELETE]

Request array attributes:
- **id** (required, integer, `1`): Template ID.

+ Request (application/json)

        [1, 2]

+ Response 200 (application/json)

        {
            "message": "success"
        }

## Equipment Template [/mxc/modbus/equipment-templates/{id}]

+ Parameters
    + id: 1 (required, number) - The id of equipment template to return

A equipment template object has the following attributes:

- **id** (required, integer, `1`): Template ID.
- **name** (required, string, `ioLogik-E2210`): Template name. Allowed chars `[A-Za-z0-9_-]`, 3 <= length <= 255
- **tagList** (required, object array)
    - **name** (required, string, `di0`): Tag name. Allowed chars `[A-Za-z0-9_-]`, 2 <= length <= 255.
    - **unit** (optional, string, `Volt`): Tag unit.
    - **function** (required, string, `read-coils`): Function to retrieve the Tag value. Can be one of `read-coils`, `read-input-registers`, `read-discrete-inputs`, `read-holding-registers`.
    - **address** (required, integer, `0`): Address of the tag. `0x0000(0) <= value <= 0xFFFF(65535)`
    - **quantity** (required, integer, `1`): Tag length. Must greater than 0.
    - **type** (required, string, `UINT16`): Tag data type. Must be one of `uint16`, `uint32`, `uint64`, `int16`, `int32`, `int64`, `float32`, `float64`, `string`, `boolean`
    - **enableByteOrder** (optional, integer, `0`): Enable byte order or not.
    - **byteOrder** (optional, string, `CDAB`): Switch input byte order. Can be any permutation of `BA`, `CDAB`, `DCBA`.
    - **enableInvalidValue** (optional, integer, `0`): Enable invalidValue or not.
    - **invalidValue** (optional, integer array): Array size is equals to quantity. `if input == INVALID_VALUE, assume the value is not valid`.
    - **description** (optional, string, `alarm input`): User edited description.
    - **enableAutoScaling** (optional, integer, `0`): Enable auto scaling or not.
    - **autoScalingMode** (optional, string, `intercept`): Auto scaling mode: intercept or point
    - **autoScaling** (required if enableAutoScaling = 1, object)
        - **slope** (required if autoScaling = intercept, number, `3.14`): `V = input * S + O`.
        - **offset** (required if autoScaling = intercept, number, `-0.33`): `V = input * S + O`.
        - **sourceMin** (required if autoScaling = point, number, `0`): `output = ((input-sourceMin) * (targetMax-targetMin) / (sourceMax-sourceMin)) + targetMin`.
        - **sourceMax** (required if autoScaling = point, number, `1`): `output = ((input-sourceMin) * (targetMax-targetMin) / (sourceMax-sourceMin)) + targetMin`.
        - **targetMin** (required if autoScaling = point, number, `0`): `output = ((input-sourceMin) * (targetMax-targetMin) / (sourceMax-sourceMin)) + targetMin`.
        - **targetMax** (required if autoScaling = point, number, `100`): `output = ((input-sourceMin) * (targetMax-targetMin) / (sourceMax-sourceMin)) + targetMin`.

### Get a equipment template by id [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "name": "ioLogik-E2242",
            "tagList": [
                {
                    "name": "di0",
                    "function": "read-coils",
                    "address": 0,
                    "quantity": 1,
                    "type": "UINT16",
                    "description": "alarm input"
                }
            ]
        }

### Update a equipment template [PUT]

+ Parameters
    + id: 1 (required, number) - The id of equipment template to update
    

+ Request (application/json)

        {
            "id": 1,
            "name": "ioLogik-E2242",
            "tagList": [
                {
                    "name": "di0",
                    "function": "read-coils",
                    "address": 0,
                    "quantity": 1,
                    "type": "UINT16",
                    "description": "alarm input"
                }
            ]
        }

+ Response 200 (application/json)

        {
            "message": "success"
        }

### Delete a equipment template [DELETE]

+ Parameters
    + id: 1 (required, number) - The id of equipment template to delete
    

+ Response 200 (application/json)

        {
            "message": "success"
        }



## Import Equipment Template [/mxc/modbus/import-equipment-templates]
import/export Equipment Template configuration files to/from the system.

### Import [PUT]
The request for PUT has following attributes:

- **file.url** (required, string, `3`): File http url.
- **file.headers** (optional, object): Headers for fetch the file if necessary.
- **override** (required, boolean): If one of templates is exist, it will override or not.

+ Request  (application/json)

        {
          "id": 3,
          "resource": "/mxc/modbus/import-equipment-templates",
          "method": "put",
          "data": {
            "override": false,
            "file": {
              "url": "http://192.168.31.81:5000/api/v1/download/1234",
              "headers": {
                "accessToken": "MOXAMOXA-TEST-SYSTEM"
              }
            }
          }
        }

+ Response 200 (application/json)

        {}


## Export Equipment Template [/mxc/modbus/export-equipment-templates{?ids}]

+ Parameters
    + ids (optional, number) - Id of templates. If not given this parameters, it will exports all templates.

### Export From web to backend [GET]

The response for GET would be a file.

+ Request  (application/json)


+ Response 200 (application/octet-stream)

        ```binary data goes here```

### Export From backend to bundle [POST]

The response for GET has following attributes:

+ Request  (application/json)

        {
          "url": "https://server/upload",
          "headers": {
            "accessToken": "MOXAMOXA-TEST-SYSTEM"
          }
        }

+ Response 200 (application/json)

        {
          "url": "https://server/upload/xxxxxxx"
        }


# Group Modbus Device List

## Interface Collection [/mxc/modbus/interfaces]

### Get all interfaces [GET]

A interface object has the following attributes:

- **id** (required, integer, `1`): Interface ID.
- **name** (required, string, `ioLogik-E2210`): Interface name.
- **type** (required, string, `modbus-tcp`): Type of interface. Could be one of `modbus-rtu`, `modbus-tcp`
- **pollingPeriodMS** (required, integer, `6000`): 1000 <= value < 86400000.
- **requestTimeoutMS** (required, integer): 100 <= value <= 60000.
- **deviceList** (required, object array):
    - **deviceId** (required, integer): `0 <= value <= 255`
    - **equipmentTemplate** (required, string): allowed chars `[A-Za-z0-9_-]`, length: 3-255
    - **equipmentName** (required, string): allowed chars `[A-Za-z0-9_-]`, length: 3-255
- **config** (required, object):
    - **dev** (required if `type == modbus-rtu`, string):
    - **devDisplayName** (required if `type == modbus-rtu`, string):
    - **baudRate** (required if `type == modbus-rtu`, integer):
    - **parity** (required if `type == modbus-rtu`, string):
    - **stopBits** (required if `type == modbus-rtu`, int): `0`, `1`, `2`
    - **intercharTimeoutMS** (required if `type == modbus-rtu`, integer):
    - **host** (required if `type == modbus-tcp`, string):
    - **port** (required if `type == modbus-tcp`, integer):

+ Response 200 (application/json)

        [
          {
            "id": 1,
            "name": "Modbus RTU E2210",
            "type": "modbus-rtu",
            "pollingPeriodMS": 1500,
            "requestTimeoutMS": 1000,
            "deviceList": [
              {
                "deviceId": 31,
                "equipmentTemplate": "ioLogik-E2214",
                "equipmentName": "My ioLogik-E2214"
              },
              {
                "deviceId": 32,
                "equipmentTemplate": "ioLogik-E2242",
                "equipmentName": "My ioLogik-E2242"
              }
            ],
            "config": {
              "dev": "/dev/ttyS0",
              "devDisplayName": "PORT 1",
              "baudRate": 9600,
              "parity": "even",
              "stopBits": 1,
              "intercharTimeoutMS": 300
            }
          },
          {
            "id": 2,
            "name": "Modbus Gateway E2520",
            "type": "modbus-tcp",
            "config": {
              "host": "192.168.31.123",
              "port": 502
            },
            "pollingPeriodMS": 3000,
            "requestTimeoutMS": 1000,
            "deviceList": [
              {
                "deviceId": 0,
                "equipmentTemplate": "ioLogik-E2242",
                "equipmentName": "My-ioLogik-E2242"
              }
            ]
          }
        ]


### Create a interface [POST]

+ Request (application/json)

        {
          "name": "Modbus Gateway E2520",
          "type": "modbus-tcp",
          "config": {
            "host": "192.168.31.123",
            "port": 502
          },
          "pollingPeriodMS": 3000,
          "requestTimeoutMS": 1000,
          "deviceList": [
            {
              "deviceId": 0,
              "equipmentTemplate": "ioLogik-E2520",
              "equipmentName": "My-ioLogik-E2520"
            }
          ]
        }

+ Response 200 (application/json)

        {
          "id": 1,
          "name": "Modbus Gateway E2520",
          "type": "modbus-tcp",
          "config": {
            "host": "192.168.31.123",
            "port": 502
          },
          "pollingPeriodMS": 3000,
          "requestTimeoutMS": 1000,
          "deviceList": [
            {
              "deviceId": 0,
              "equipmentTemplate": "ioLogik-E2520",
              "equipmentName": "My-ioLogik-E2520"
            }
          ]
        }

## Interface [/mxc/modbus/interfaces/{id}]

### Get a interface by id [GET]

+ Parameters
    + id: 1 (required, number) - The id of interface to return

+ Response 200 (application/json)

        {
          "id": 1,
          "name": "Modbus Gateway E2520",
          "type": "modbus-tcp",
          "config": {
            "host": "192.168.31.123",
            "port": 502
          },
          "pollingPeriodMS": 3000,
          "requestTimeoutMS": 1000,
          "deviceList": [
            {
              "deviceId": 0,
              "equipmentTemplate": "ioLogik-E2520",
              "equipmentName": "My-ioLogik-E2520"
            }
          ]
        }

### Update a interface [PUT]

+ Parameters
    + id: 1 (required, number) - The id of interface to update

+ Request (application/json)

        {
          "id": 1,
          "name": "Modbus Gateway E2520",
          "type": "modbus-tcp",
          "config": {
            "host": "192.168.31.123",
            "port": 502
          },
          "pollingPeriodMS": 3000,
          "requestTimeoutMS": 1000,
          "deviceList": [
            {
              "deviceId": 0,
              "equipmentTemplate": "ioLogik-E2520",
              "equipmentName": "My-ioLogik-E2520"
            }
          ]
        }

+ Response 200 (application/json)

        {
            "message": "success"
        }

### Delete a interface [DELETE]

+ Parameters
    + id: 1 (required, number) - The id of interface to delete

+ Response 200 (application/json)

        {
            "message": "success"
        }

# Group Log Profile

## Log Profile Collection [/mxc/logprofile]

### Get all log profiles [GET]

+ Response 200 (application/json)

        [
          {
            "id": 1,
            "name": "log-profile-1",
            "archiver": {
              "directory": "/var/mxc/upload",
              "thresholdBytePerFile": 5242800,
              "directorySizeLimitByte": 102400,
              "archivesToKeep": 24
            },
            "uploader": {
              "httpPost": {
                "url": "http://host/post",
                "enableAuth": 0,
                "authentication": {
                  "username": "uploader",
                  "password": "password"
                },
                "bypassSSL": 1,
                "cronExpr": "0 * * * *",
                "format": "json",
                "compress": "gzip",
                "enableCompress": 1,
                "retryCount": 3,
                "retryPeriodSec": 3
              }
            },
            "deviceList": [
              {
                "equipmentName": "My-ioLogik-E2242",
                "equipmentTags": [
                    {
                        "name": "di0",
                        "logOnChange": false
                    },
                    {
                        "name": "di1",
                        "logOnChange": false
                    },
                    {
                        "name": "ai0",
                        "logOnChange": false
                    }
                ]
              },
              {
                "equipmentName": "My-other-ioLogik-E2242",
                "equipmentTags": [
                    {
                        "name": "di0",
                        "logOnChange": false
                    },
                    {
                        "name": "di1",
                        "logOnChange": false
                    },
                    {
                        "name": "ai0",
                        "logOnChange": false
                    }
                ]
              }
            ]
          },
          {
            "id": 2,
            "name": "log-profile-2",
            "archiver": {
              "directory": "/var/mxc/upload",
              "thresholdBytePerFile": 5242800,
              "directorySizeLimitByte": 102400,
              "archivesToKeep": 24
            },
            "uploader": {
              "httpPost": {
                "url": "http://host/post",
                "enableAuth": 0,
                "authentication": {
                  "username": "uploader",
                  "password": "password"
                },
                "bypassSSL": 1,
                "cronExpr": "0 * * * *",
                "format": "json",
                "compress": "gzip",
                "enableCompress": 1,
                "retryCount": 3,
                "retryPeriodSec": 3
              }
            },
            "deviceList": [
              {
                "equipmentName": "My-ioLogik-E2242",
                "equipmentTags": [
                    {
                        "name": "di0",
                        "logOnChange": true
                    },
                    {
                        "name": "di1",
                        "logOnChange": true
                    },
                    {
                        "name": "ai0",
                        "logOnChange": false
                    }
                ]
              },
              {
                "equipmentName": "My-other-ioLogik-E2242",
                "equipmentTags": {
                    "ai0": {
                        "name": "ai0",
                        "logOnChange": true
                    }
                }
              }
            ]
          }
        ]
        

### Create a log profile [POST]

+ Request (application/json)

        {
          "name": "log-profile-1",
          "archiver": {
            "directory": "/var/mxc/upload",
            "thresholdBytePerFile": 5242800,
            "directorySizeLimitByte": 102400,
            "archivesToKeep": 24
          },
          "uploader": {
            "httpPost": {
              "url": "http://host/post",
              "enableAuth": 0,
              "authentication": {
                "username": "uploader",
                "password": "password"
              },
              "bypassSSL": 1,
              "cronExpr": "* */1 * * *",
              "format": "json",
              "compress": "gzip",
              "enableCompress": 1,
              "retryCount": 3,
              "retryPeriodSec": 3
            }
          },
          "deviceList": [
            {
              "equipmentName": "My-ioLogik-E2242",
                "equipmentTags": [
                    {
                        "name": "di0",
                        "logOnChange": true
                    },
                    {
                        "name": "di1",
                        "logOnChange": true
                    },
                    {
                        "name": "ai0",
                        "logOnChange": false
                    }
                ]
            },
            {
              "equipmentName": "My-other-ioLogik-E2242",
                "equipmentTags": [
                    {
                        "name": "di0",
                        "logOnChange": true
                    },
                    {
                        "name": "di1",
                        "logOnChange": true
                    },
                    {
                        "name": "ai0",
                        "logOnChange": false
                    }
                ]
            }
          ]
        }

+ Response 200 (application/json)

        {
          "id": 3,
          "name": "log-profile-1",
          "archiver": {
            "directory": "/var/mxc/upload",
            "thresholdBytePerFile": 5242800,
            "directorySizeLimitByte": 102400,
            "archivesToKeep": 24
          },
          "uploader": {
            "httpPost": {
              "url": "http://host/post",
              "enableAuth": 0,
              "authentication": {
                "username": "uploader",
                "password": "password"
              },
              "bypassSSL": 1,
              "cronExpr": "* */1 * * *",
              "format": "json",
              "compress": "gzip",
              "enableCompress": 1,
              "retryCount": 3,
              "retryPeriodSec": 3
            }
          },
          "deviceList": [
            {
              "equipmentName": "My-ioLogik-E2242",
                "equipmentTags": [
                    {
                        "name": "di0",
                        "logOnChange": true
                    },
                    {
                        "name": "di1",
                        "logOnChange": true
                    },
                    {
                        "name": "ai0",
                        "logOnChange": false
                    }
                ]
            },
            {
              "equipmentName": "My-other-ioLogik-E2242",
                "equipmentTags": [
                    {
                        "name": "di0",
                        "logOnChange": true
                    },
                    {
                        "name": "di1",
                        "logOnChange": true
                    },
                    {
                        "name": "ai0",
                        "logOnChange": false
                    }
                ]
            }
          ]
        }
        
### Delete log profiles [DELETE]

+ Request (application/json)

        [1, 2, 3]

+ Response 200 (application/json)

        {
          "message": "success"
        }


## Log Profile [/mxc/logprofile/{id}]

+ Parameter
    + id: 1 (required, number) - ID of the Log Profile in form of an integer

### Get a log profile [GET]

+ Response 200 (application/json)

        {
          "id": 1,
          "name": "log-profile-1",
          "archiver": {
            "directory": "/var/mxc/upload",
            "thresholdBytePerFile": 5242800,
            "directorySizeLimitByte": 102400,
            "archivesToKeep": 24
          },
          "uploader": {
            "httpPost": {
              "url": "http://host/post",
              "enableAuth": 0,
              "authentication": {
                "username": "uploader",
                "password": "password"
              },
              "bypassSSL": 1,
              "cronExpr": "* */1 * * *",
              "format": "json",
              "compress": "gzip",
              "enableCompress": 1,
              "retryCount": 3,
              "retryPeriodSec": 3
            }
          },
          "deviceList": [
            {
              "equipmentName": "My-ioLogik-E2242",
                "equipmentTags": [
                    {
                        "name": "di0",
                        "logOnChange": true
                    },
                    {
                        "name": "di1",
                        "logOnChange": true
                    },
                    {
                        "name": "ai0",
                        "logOnChange": false
                    }
                ]
            },
            {
              "equipmentName": "My-other-ioLogik-E2242",
                "equipmentTags": [
                    {
                        "name": "di0",
                        "logOnChange": true
                    },
                    {
                        "name": "di1",
                        "logOnChange": true
                    },
                    {
                        "name": "ai0",
                        "logOnChange": false
                    }
                ]
            }
          ]
        }


### Update a log profile [PUT]

+ Request (application/json)

        {
          "name": "log-profile-1",
          "archiver": {
            "directory": "/var/mxc/upload",
            "thresholdBytePerFile": 5242800,
            "directorySizeLimitByte": 102400,
            "archivesToKeep": 24
          },
          "uploader": {
            "httpPost": {
              "url": "http://host/post",
              "enableAuth": 0,
              "authentication": {
                "username": "uploader",
                "password": "password"
              },
              "bypassSSL": 1,
              "cronExpr": "* */1 * * *",
              "format": "json",
              "compress": "gzip",
              "enableCompress": 1,
              "retryCount": 3,
              "retryPeriodSec": 3
            }
          },
          "deviceList": [
            {
              "equipmentName": "My-ioLogik-E2242",
                "equipmentTags": [
                    {
                        "name": "di0",
                        "logOnChange": true
                    },
                    {
                        "name": "di1",
                        "logOnChange": true
                    },
                    {
                        "name": "ai0",
                        "logOnChange": false
                    }
                ]
            },
            {
              "equipmentName": "My-other-ioLogik-E2242",
                "equipmentTags": [
                    {
                        "name": "di0",
                        "logOnChange": true
                    },
                    {
                        "name": "di1",
                        "logOnChange": true
                    },
                    {
                        "name": "ai0",
                        "logOnChange": false
                    }
                ]
            }
          ]
        }

+ Response 200 (application/json)

        {
          "id": 1,
          "name": "log-profile-1",
          "archiver": {
            "directory": "/var/mxc/upload",
            "thresholdBytePerFile": 5242800,
            "directorySizeLimitByte": 102400,
            "archivesToKeep": 24
          },
          "uploader": {
            "httpPost": {
              "url": "http://host/post",
              "enableAuth": 0,
              "authentication": {
                "username": "uploader",
                "password": "password"
              },
              "bypassSSL": 1,
              "cronExpr": "* */1 * * *",
              "format": "json",
              "compress": "gzip",
              "enableCompress": 1,
              "retryCount": 3,
              "retryPeriodSec": 3
            }
          },
          "deviceList": [
            {
              "equipmentName": "My-ioLogik-E2242",
                "equipmentTags": [
                    {
                        "name": "di0",
                        "logOnChange": true
                    },
                    {
                        "name": "di1",
                        "logOnChange": true
                    },
                    {
                        "name": "ai0",
                        "logOnChange": false
                    }
                ]
            },
            {
              "equipmentName": "My-other-ioLogik-E2242",
                "equipmentTags": [
                    {
                        "name": "di0",
                        "logOnChange": true
                    },
                    {
                        "name": "di1",
                        "logOnChange": true
                    },
                    {
                        "name": "ai0",
                        "logOnChange": false
                    }
                ]
            }
          ]
        }
        
### Delete a log profile [DELETE]

+ Response 200 (application/json)

        {
          "message": "success"
        }

## Test Logprofile [/mxc/test-logprofile/{id}]

+ Parameter
    + id: 1 (required, number) - ID of the Log Profile in form of an integer

### Get a log profile [GET]

+ Response 200 (application/json)

        
## Test Logprofile Connection [/mxc/test-logprofile-connection]

### Test a log profile upload connection [POST]

+ Request (application/json)

        {
            "httpPost": {
              "url": "http://host/post",
              "enableAuth": 0,
              "authentication": {
                "username": "uploader",
                "password": "password"
              },
              "bypassSSL": 1,
              "cronExpr": "* */1 * * *",
              "format": "json",
              "compress": "gzip",
              "enableCompress": 1,
              "retryCount": 3,
              "retryPeriodSec": 3
            }
        }

+ Response 200 (application/json)

## Test Logprofile Upload [/mxc/test-logprofile-upload]

### Test a log profile by upload [POST]

+ Request (application/json)
        {
            "id": 1
        }

+ Response 200 (application/json)
